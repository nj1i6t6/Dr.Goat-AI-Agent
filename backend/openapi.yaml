openapi: 3.0.3
info:
  title: Goat Nutrition App API
  version: 0.1.0
  description: |
    Minimal OpenAPI for key endpoints. Auth uses cookie session (Flask-Login).
servers:
  - url: http://localhost:5001
paths:
  /api/auth/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string, format: password }
      responses:
        '201': { description: Created }
        '400': { description: Bad Request }
        '409': { description: Conflict }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string, format: password }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/auth/logout:
    post:
      summary: Logout
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/auth/status:
    get:
      summary: Auth status
      responses:
        '200': { description: OK }
  /api/auth/health:
    get:
      summary: Health check
      responses:
        '200': { description: Healthy }
        '503': { description: Unhealthy }
  /api/sheep/:
    get:
      summary: List sheep (current user)
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      summary: Create sheep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [EarNum]
              properties:
                EarNum: { type: string }
                Breed: { type: string }
                Sex: { type: string }
                BirthDate: { type: string }
      responses:
        '201': { description: Created }
        '400': { description: Validation error }
        '409': { description: Duplicate EarNum }
  /api/sheep/{ear_num}:
    parameters:
      - in: path
        name: ear_num
        required: true
        schema: { type: string }
    get:
      summary: Get one sheep (with events)
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
    put:
      summary: Update sheep (records history for key fields)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '400': { description: Validation error }
        '404': { description: Not Found }
    delete:
      summary: Delete sheep
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
  /api/sheep/{ear_num}/events:
    parameters:
      - in: path
        name: ear_num
        required: true
        schema: { type: string }
    get:
      summary: List events
      responses:
        '200': { description: OK }
    post:
      summary: Add event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [event_date, event_type]
              properties:
                event_date: { type: string }
                event_type: { type: string }
                description: { type: string }
                medication: { type: string }
                withdrawal_days: { type: integer }
      responses:
        '201': { description: Created }
  /api/sheep/events/{event_id}:
    parameters:
      - in: path
        name: event_id
        required: true
        schema: { type: integer }
    put:
      summary: Update event
      responses:
        '200': { description: OK }
    delete:
      summary: Delete event
      responses:
        '200': { description: OK }
  /api/sheep/{ear_num}/history:
    parameters:
      - in: path
        name: ear_num
        required: true
        schema: { type: string }
    get:
      summary: List historical data
      responses:
        '200': { description: OK }
  /api/sheep/history/{record_id}:
    parameters:
      - in: path
        name: record_id
        required: true
        schema: { type: integer }
    delete:
      summary: Delete historical record
      responses:
        '200': { description: OK }
  /api/data/export_excel:
    get:
      summary: Export all data as Excel
      responses:
        '200': { description: File stream }
  /api/data/analyze_excel:
    post:
      summary: Analyze uploaded Excel structure
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
  /api/data/process_import:
    post:
      summary: Import data from Excel (default template or custom mapping)
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
  /api/dashboard/data:
    get:
      summary: Dashboard aggregates
      responses:
        '200': { description: OK }
  /api/dashboard/farm_report:
    get:
      summary: Farm report
      responses:
        '200': { description: OK }
  /api/dashboard/event_options:
    get:
      summary: Event type/description options
      responses:
        '200': { description: OK }
  /api/dashboard/event_types:
    post:
      summary: Add event type
      responses:
        '201': { description: Created }
  /api/dashboard/event_types/{type_id}:
    parameters:
      - in: path
        name: type_id
        required: true
        schema: { type: integer }
    delete:
      summary: Delete event type
      responses:
        '200': { description: OK }
  /api/dashboard/event_descriptions:
    post:
      summary: Add event description
      responses:
        '201': { description: Created }
  /api/dashboard/event_descriptions/{desc_id}:
    parameters:
      - in: path
        name: desc_id
        required: true
        schema: { type: integer }
    delete:
      summary: Delete event description
      responses:
        '200': { description: OK }
  /api/agent/tip:
    get:
      summary: Daily tip (requires X-Api-Key)
      responses:
        '200': { description: OK }
        '401': { description: Missing API key }
  /api/agent/recommendation:
    post:
      summary: Nutrition recommendation (JSON contains api_key)
      responses:
        '200': { description: OK }
        '400': { description: Validation error }
  /api/agent/chat:
    post:
      summary: Chat with AI (text or image multipart; requires api_key)
      responses:
        '200': { description: OK }
        '400': { description: Validation error }
  /api/finance/costs:
    get:
      summary: List cost entries
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 500 }
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: breed
          schema: { type: string }
        - in: query
          name: age_group
          schema: { type: string }
        - in: query
          name: parity
          schema: { type: integer }
        - in: query
          name: herd_tag
          schema: { type: string }
        - in: query
          name: start_at
          schema: { type: string, format: date-time }
        - in: query
          name: end_at
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CostEntry'
        '401': { description: Unauthorized }
    post:
      summary: Create cost entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostEntryInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostEntry'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
  /api/finance/costs/bulk:
    post:
      summary: Bulk create cost entries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [entries]
              properties:
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/CostEntryInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CostEntry'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
  /api/finance/costs/{entry_id}:
    put:
      summary: Update cost entry
      parameters:
        - in: path
          name: entry_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostEntryPartial'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostEntry'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    delete:
      summary: Delete cost entry
      parameters:
        - in: path
          name: entry_id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
  /api/finance/revenues:
    get:
      summary: List revenue entries
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 500 }
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: breed
          schema: { type: string }
        - in: query
          name: age_group
          schema: { type: string }
        - in: query
          name: parity
          schema: { type: integer }
        - in: query
          name: herd_tag
          schema: { type: string }
        - in: query
          name: start_at
          schema: { type: string, format: date-time }
        - in: query
          name: end_at
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RevenueEntry'
        '401': { description: Unauthorized }
    post:
      summary: Create revenue entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevenueEntryInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueEntry'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
  /api/finance/revenues/bulk:
    post:
      summary: Bulk create revenue entries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [entries]
              properties:
                entries:
                  type: array
                  items:
                    $ref: '#/components/schemas/RevenueEntryInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RevenueEntry'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
  /api/finance/revenues/{entry_id}:
    put:
      summary: Update revenue entry
      parameters:
        - in: path
          name: entry_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevenueEntryPartial'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueEntry'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    delete:
      summary: Delete revenue entry
      parameters:
        - in: path
          name: entry_id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
  /api/bi/cohort-analysis:
    post:
      summary: Cohort analysis query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnalysisRequest'
      responses:
        '200':
          description: Aggregated metrics by cohort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnalysisResponse'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '429': { description: Rate limited }
  /api/bi/cost-benefit:
    post:
      summary: Cost-benefit trend query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostBenefitRequest'
      responses:
        '200':
          description: Cost-benefit metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostBenefitResponse'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '429': { description: Rate limited }
  /api/bi/ai-report:
    post:
      summary: Generate AI operations report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiReportRequest'
      responses:
        '200':
          description: AI generated report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiReportResponse'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '502': { description: Upstream AI error }
  /api/prediction/goats/{ear_tag}/prediction:
    parameters:
      - in: path
        name: ear_tag
        required: true
        schema: { type: string }
      - in: query
        name: target_days
        required: false
        schema: { type: integer, default: 30 }
    get:
      summary: Linear regression growth prediction (+ optional AI explanation)
      responses:
        '200': { description: OK }
        '400': { description: Insufficient data }
  /api/prediction/goats/{ear_tag}/prediction/chart-data:
    parameters:
      - in: path
        name: ear_tag
        required: true
        schema: { type: string }
      - in: query
        name: target_days
        required: false
        schema: { type: integer, default: 30 }
    get:
      summary: Chart data for prediction
      responses:
        '200': { description: OK }
        '400': { description: Insufficient data }
  /api/iot/devices:
    get:
      summary: List IoT devices for current user
      security:
        - cookieAuth: []
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      summary: Register a new IoT device
      description: |
        Returns device metadata and a one-time `api_key` field. The API key is only returned in this response and
        cannot be retrieved afterwards.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201': { description: Created with one-time API key }
        '400': { description: Validation error }
        '401': { description: Unauthorized }
  /api/iot/devices/{device_id}:
    parameters:
      - in: path
        name: device_id
        required: true
        schema: { type: integer }
    get:
      summary: Retrieve IoT device details
      security:
        - cookieAuth: []
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    put:
      summary: Update IoT device metadata
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: Updated }
        '400': { description: Validation error }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    delete:
      summary: Remove IoT device
      security:
        - cookieAuth: []
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
  /api/iot/ingest:
    post:
      summary: Ingest sensor data from IoT device
      description: Requires `X-API-Key` header signed with device secret. Returns 201 on success.
      parameters:
        - in: header
          name: X-API-Key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [data]
              properties:
                data:
                  type: object
      responses:
        '201': { description: Accepted and enqueued }
        '400': { description: Invalid payload }
        '401': { description: Missing or invalid API key }
  /api/iot/rules:
    get:
      summary: List automation rules
      security:
        - cookieAuth: []
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    post:
      summary: Create automation rule
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201': { description: Created }
        '400': { description: Validation error }
        '401': { description: Unauthorized }
  /api/iot/rules/{rule_id}:
    parameters:
      - in: path
        name: rule_id
        required: true
        schema: { type: integer }
    put:
      summary: Update automation rule
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: Updated }
        '400': { description: Validation error }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    delete:
      summary: Delete automation rule
      security:
        - cookieAuth: []
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
  /api/verify/chain:
    get:
      summary: Verify verifiable ledger chain integrity
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: start_id
          required: false
          schema:
            type: integer
            minimum: 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - in: query
          name: entity_type
          required: false
          schema:
            type: string
        - in: query
          name: entity_id
          required: false
          schema:
            type: integer
        - in: query
          name: include_entries
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Chain verified without issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyChainResponse'
        '409':
          description: Chain integrity failure detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyChainResponse'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
  schemas:
    CostEntry:
      type: object
      properties:
        id: { type: integer }
        category: { type: string }
        subcategory: { type: string, nullable: true }
        amount: { type: number, format: float }
        currency: { type: string }
        recorded_at: { type: string, format: date-time }
        breed: { type: string, nullable: true }
        age_group: { type: string, nullable: true }
        parity: { type: integer, nullable: true }
        herd_tag: { type: string, nullable: true }
        description: { type: string, nullable: true }
        notes: { type: string, nullable: true }
        metadata:
          type: object
          additionalProperties: true
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    CostEntryInput:
      type: object
      required: [category, amount, recorded_at]
      properties:
        category: { type: string }
        subcategory: { type: string }
        amount: { type: number }
        currency: { type: string, default: TWD }
        recorded_at: { type: string, format: date-time }
        breed: { type: string }
        age_group: { type: string }
        parity: { type: integer }
        herd_tag: { type: string }
        description: { type: string }
        notes: { type: string }
        metadata:
          type: object
          additionalProperties: true
    CostEntryPartial:
      allOf:
        - $ref: '#/components/schemas/CostEntryInput'
      required: []
    RevenueEntry:
      type: object
      properties:
        id: { type: integer }
        category: { type: string }
        subcategory: { type: string, nullable: true }
        amount: { type: number, format: float }
        currency: { type: string }
        recorded_at: { type: string, format: date-time }
        breed: { type: string, nullable: true }
        age_group: { type: string, nullable: true }
        parity: { type: integer, nullable: true }
        herd_tag: { type: string, nullable: true }
        description: { type: string, nullable: true }
        notes: { type: string, nullable: true }
        metadata:
          type: object
          additionalProperties: true
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    RevenueEntryInput:
      type: object
      required: [category, amount, recorded_at]
      properties:
        category: { type: string }
        subcategory: { type: string }
        amount: { type: number }
        currency: { type: string, default: TWD }
        recorded_at: { type: string, format: date-time }
        breed: { type: string }
        age_group: { type: string }
        parity: { type: integer }
        herd_tag: { type: string }
        description: { type: string }
        notes: { type: string }
        metadata:
          type: object
          additionalProperties: true
    RevenueEntryPartial:
      allOf:
        - $ref: '#/components/schemas/RevenueEntryInput'
      required: []
    CohortAnalysisRequest:
      type: object
      required: [dimensions, metrics]
      properties:
        dimensions:
          type: array
          items: { type: string }
          minItems: 1
        metrics:
          type: array
          items: { type: string }
          minItems: 1
        filters:
          type: object
          additionalProperties:
            type: array
            items: { oneOf: [{ type: string }, { type: integer }] }
        time_range:
          type: object
          properties:
            start: { type: string, format: date-time }
            end: { type: string, format: date-time }
        limit: { type: integer, default: 50 }
    CohortAnalysisResponse:
      type: object
      properties:
        dimensions:
          type: array
          items: { type: string }
        metrics:
          type: array
          items: { type: string }
        rows:
          type: array
          items:
            type: object
            properties:
              dimensions:
                type: object
                additionalProperties: { type: string }
              metrics:
                type: object
                additionalProperties: { type: number }
        generated_at: { type: string, format: date-time }
    CostBenefitRequest:
      type: object
      required: [metrics]
      properties:
        metrics:
          type: array
          items: { type: string }
          minItems: 1
        granularity:
          type: string
          enum: [day, month]
          default: month
        filters:
          type: object
          additionalProperties:
            type: array
            items: { oneOf: [{ type: string }, { type: integer }] }
        time_range:
          type: object
          properties:
            start: { type: string, format: date-time }
            end: { type: string, format: date-time }
    CostBenefitResponse:
      type: object
      properties:
        metrics:
          type: array
          items: { type: string }
        granularity:
          type: string
        kpis:
          type: object
          additionalProperties: { type: number }
        trend:
          type: array
          items:
            type: object
            properties:
              period: { type: string }
              metrics:
                type: object
                additionalProperties: { type: number }
        generated_at: { type: string, format: date-time }
    AiReportRequest:
      type: object
      required: [api_key, metrics, aggregates]
      properties:
        api_key: { type: string }
        metrics:
          type: array
          items: { type: string }
          minItems: 1
        filters:
          type: object
          additionalProperties:
            type: array
            items: { oneOf: [{ type: string }, { type: integer }] }
        time_range:
          type: object
          properties:
            start: { type: string, format: date-time }
            end: { type: string, format: date-time }
        highlights:
          type: array
          items: { type: string }
        aggregates:
          type: object
          additionalProperties: true
    AiReportResponse:
      type: object
      properties:
        report_markdown: { type: string }
        report_html: { type: string }
    VerifiableLogEntry:
      type: object
      properties:
        id:
          type: integer
        entity_type:
          type: string
        entity_id:
          type: integer
        timestamp:
          type: string
          format: date-time
        previous_hash:
          type: string
          nullable: true
        current_hash:
          type: string
        event_data:
          type: object
          additionalProperties: true
    VerifyChainResponse:
      type: object
      properties:
        integrity:
          type: string
          enum: [OK, FAILED]
        broken_at_id:
          type: integer
          nullable: true
        checked:
          type: integer
        last_hash:
          type: string
          nullable: true
        entries:
          type: array
          items:
            $ref: '#/components/schemas/VerifiableLogEntry'
security:
  - cookieAuth: []
