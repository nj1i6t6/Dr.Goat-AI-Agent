services:
  # PostgreSQL 資料庫服務
  db:
    image: postgres:15-alpine
    container_name: goat-nutrition-db
    environment:
      POSTGRES_DB: goat_nutrition_db
      POSTGRES_USER: goat_user
      POSTGRES_PASSWORD: goat_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goat_user -d goat_nutrition_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - goat-network

  # Redis 快取與任務佇列
  redis:
    image: redis:7.2-alpine
    container_name: goat-nutrition-redis
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-simon7220}"]
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-simon7220}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-simon7220}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - goat-network

  # 後端服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: goat-nutrition-backend
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # PostgreSQL 資料庫配置
      POSTGRES_DB: goat_nutrition_db
      POSTGRES_USER: goat_user
      POSTGRES_PASSWORD: goat_password
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432

      # 應用程式配置
      SECRET_KEY: your-very-secret-key-change-in-production
      FLASK_ENV: production
      FLASK_DEBUG: "False"

      # Redis 設定
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-simon7220}
      RQ_QUEUE_NAME: default

      # CORS 配置
      CORS_ORIGINS: https://*.app.github.dev,https://*.codespaces.github.com,https://*.githubpreview.dev,http://localhost,http://127.0.0.1
      
      # Google API
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-your-gemini-api-key}
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/auth/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - goat-network

  # 前端服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: goat-nutrition-frontend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "3000:80"  # 額外埠口，支援 Codespaces 埠口轉發
    environment:
      - NGINX_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - goat-network

      # ↓↓↓ 把下面这段加到文件的末尾 ↓↓↓
  iot_simulator:
    build:
      context: ./iot_simulator
      dockerfile: Dockerfile
    container_name: goat-nutrition-simulator
    depends_on:
      - backend
    environment:
      # 关键！API_KEY 必须是你创建的某个 IoT 设备的真实 API Key
      API_KEY: "DlwfIbVk6tVZjoM0q9EL2CcupH8d5sKM" 

      # 关键！INGEST_URL 指向 backend 服务的内部地址
      INGEST_URL: "http://backend:5001/api/iot/ingest"

      # 其他可选配置
      DEVICE_TYPE: "environment_sensor" # 模拟的设备类型
      SEND_INTERVAL_SECONDS: 20 # 每 20 秒发送一次数据
    restart: unless-stopped
    networks:
      - goat-network


# 資料卷定義
volumes:
  postgres_data:
    driver: local

# 網路定義
networks:
  goat-network:
    driver: bridge
